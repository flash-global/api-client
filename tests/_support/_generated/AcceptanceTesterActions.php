<?php  //[STAMP] b0b0ef22a466d937466412d97482a79f
namespace _generated;

// This class was automatically generated by build task
// You should not change it manually as it will be overwritten on next build
// @codingStandardsIgnoreFile

use Helper\Acceptance;
use Codeception\Module\Queue;

trait AcceptanceTesterActions
{
    /**
     * @return \Codeception\Scenario
     */
    abstract protected function getScenario();

    
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Check if a queue/tube exists on the queueing server.
     *
     * ```php
     * <?php
     * $I->seeQueueExists('default');
     * ?>
     * ```
     *
     * @param string $queue Queue Name
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Queue::seeQueueExists()
     */
    public function canSeeQueueExists($queue) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeQueueExists', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Check if a queue/tube exists on the queueing server.
     *
     * ```php
     * <?php
     * $I->seeQueueExists('default');
     * ?>
     * ```
     *
     * @param string $queue Queue Name
     * @see \Codeception\Module\Queue::seeQueueExists()
     */
    public function seeQueueExists($queue) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeQueueExists', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Check if a queue/tube does NOT exist on the queueing server.
     *
     * ```php
     * <?php
     * $I->dontSeeQueueExists('default');
     * ?>
     * ```
     *
     * @param string $queue Queue Name
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Queue::dontSeeQueueExists()
     */
    public function cantSeeQueueExists($queue) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeQueueExists', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Check if a queue/tube does NOT exist on the queueing server.
     *
     * ```php
     * <?php
     * $I->dontSeeQueueExists('default');
     * ?>
     * ```
     *
     * @param string $queue Queue Name
     * @see \Codeception\Module\Queue::dontSeeQueueExists()
     */
    public function dontSeeQueueExists($queue) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('dontSeeQueueExists', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Check if a queue/tube is empty of all messages
     *
     * ```php
     * <?php
     * $I->seeEmptyQueue('default');
     * ?>
     * ```
     *
     * @param string $queue Queue Name
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Queue::seeEmptyQueue()
     */
    public function canSeeEmptyQueue($queue) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeEmptyQueue', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Check if a queue/tube is empty of all messages
     *
     * ```php
     * <?php
     * $I->seeEmptyQueue('default');
     * ?>
     * ```
     *
     * @param string $queue Queue Name
     * @see \Codeception\Module\Queue::seeEmptyQueue()
     */
    public function seeEmptyQueue($queue) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeEmptyQueue', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Check if a queue/tube is NOT empty of all messages
     *
     * ```php
     * <?php
     * $I->dontSeeEmptyQueue('default');
     * ?>
     * ```
     *
     * @param string $queue Queue Name
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Queue::dontSeeEmptyQueue()
     */
    public function cantSeeEmptyQueue($queue) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeEmptyQueue', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Check if a queue/tube is NOT empty of all messages
     *
     * ```php
     * <?php
     * $I->dontSeeEmptyQueue('default');
     * ?>
     * ```
     *
     * @param string $queue Queue Name
     * @see \Codeception\Module\Queue::dontSeeEmptyQueue()
     */
    public function dontSeeEmptyQueue($queue) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('dontSeeEmptyQueue', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Check if a queue/tube has a given current number of messages
     *
     * ```php
     * <?php
     * $I->seeQueueHasCurrentCount('default', 10);
     * ?>
     * ```
     *
     * @param string $queue Queue Name
     * @param int $expected Number of messages expected
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Queue::seeQueueHasCurrentCount()
     */
    public function canSeeQueueHasCurrentCount($queue, $expected) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeQueueHasCurrentCount', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Check if a queue/tube has a given current number of messages
     *
     * ```php
     * <?php
     * $I->seeQueueHasCurrentCount('default', 10);
     * ?>
     * ```
     *
     * @param string $queue Queue Name
     * @param int $expected Number of messages expected
     * @see \Codeception\Module\Queue::seeQueueHasCurrentCount()
     */
    public function seeQueueHasCurrentCount($queue, $expected) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeQueueHasCurrentCount', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Check if a queue/tube does NOT have a given current number of messages
     *
     * ```php
     * <?php
     * $I->dontSeeQueueHasCurrentCount('default', 10);
     * ?>
     * ```
     *
     * @param string $queue Queue Name
     * @param int $expected Number of messages expected
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Queue::dontSeeQueueHasCurrentCount()
     */
    public function cantSeeQueueHasCurrentCount($queue, $expected) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeQueueHasCurrentCount', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Check if a queue/tube does NOT have a given current number of messages
     *
     * ```php
     * <?php
     * $I->dontSeeQueueHasCurrentCount('default', 10);
     * ?>
     * ```
     *
     * @param string $queue Queue Name
     * @param int $expected Number of messages expected
     * @see \Codeception\Module\Queue::dontSeeQueueHasCurrentCount()
     */
    public function dontSeeQueueHasCurrentCount($queue, $expected) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('dontSeeQueueHasCurrentCount', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Check if a queue/tube has a given total number of messages
     *
     * ```php
     * <?php
     * $I->seeQueueHasTotalCount('default', 10);
     * ?>
     * ```
     *
     * @param string $queue Queue Name
     * @param int $expected Number of messages expected
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Queue::seeQueueHasTotalCount()
     */
    public function canSeeQueueHasTotalCount($queue, $expected) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeQueueHasTotalCount', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Check if a queue/tube has a given total number of messages
     *
     * ```php
     * <?php
     * $I->seeQueueHasTotalCount('default', 10);
     * ?>
     * ```
     *
     * @param string $queue Queue Name
     * @param int $expected Number of messages expected
     * @see \Codeception\Module\Queue::seeQueueHasTotalCount()
     */
    public function seeQueueHasTotalCount($queue, $expected) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeQueueHasTotalCount', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Check if a queue/tube does NOT have a given total number of messages
     *
     * ```php
     * <?php
     * $I->dontSeeQueueHasTotalCount('default', 10);
     * ?>
     * ```
     *
     * @param string $queue Queue Name
     * @param int $expected Number of messages expected
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Queue::dontSeeQueueHasTotalCount()
     */
    public function cantSeeQueueHasTotalCount($queue, $expected) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeQueueHasTotalCount', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Check if a queue/tube does NOT have a given total number of messages
     *
     * ```php
     * <?php
     * $I->dontSeeQueueHasTotalCount('default', 10);
     * ?>
     * ```
     *
     * @param string $queue Queue Name
     * @param int $expected Number of messages expected
     * @see \Codeception\Module\Queue::dontSeeQueueHasTotalCount()
     */
    public function dontSeeQueueHasTotalCount($queue, $expected) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('dontSeeQueueHasTotalCount', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Add a message to a queue/tube
     *
     * ```php
     * <?php
     * $I->addMessageToQueue('this is a messages', 'default');
     * ?>
     * ```
     *
     * @param string $message Message Body
     * @param string $queue Queue Name
     * @see \Codeception\Module\Queue::addMessageToQueue()
     */
    public function addMessageToQueue($message, $queue) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('addMessageToQueue', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Clear all messages of the queue/tube
     *
     * ```php
     * <?php
     * $I->clearQueue('default');
     * ?>
     * ```
     *
     * @param string $queue Queue Name
     * @see \Codeception\Module\Queue::clearQueue()
     */
    public function clearQueue($queue) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('clearQueue', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Grabber method to get the list of queues/tubes on the server
     *
     * ```php
     * <?php
     * $queues = $I->grabQueues();
     * ?>
     * ```
     *
     * @return array List of Queues/Tubes
     * @see \Codeception\Module\Queue::grabQueues()
     */
    public function grabQueues() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('grabQueues', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Grabber method to get the current number of messages on the queue/tube (pending/ready)
     *
     * ```php
     * <?php
     *     $I->grabQueueCurrentCount('default');
     * ?>
     * ```
     * @param string $queue Queue Name
     *
     * @return int Count
     * @see \Codeception\Module\Queue::grabQueueCurrentCount()
     */
    public function grabQueueCurrentCount($queue) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('grabQueueCurrentCount', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Grabber method to get the total number of messages on the queue/tube
     *
     * ```php
     * <?php
     *     $I->grabQueueTotalCount('default');
     * ?>
     * ```
     *
     * @param $queue Queue Name
     *
     * @return int Count
     * @see \Codeception\Module\Queue::grabQueueTotalCount()
     */
    public function grabQueueTotalCount($queue) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('grabQueueTotalCount', func_get_args()));
    }
}
